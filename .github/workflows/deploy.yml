name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip running tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests || github.event_name != 'workflow_dispatch' }}
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: test_db

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') ||
      github.event_name == 'workflow_dispatch'
    continue-on-error: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Show deployment info
      run: |
        echo "ðŸš€ Starting deployment..."
        echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "Skip tests: ${{ github.event.inputs.skip_tests || 'false' }}"
        echo "Trigger: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref }}"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2
      run: |
        # Create deployment package
        tar -czf deployment.tar.gz \
          dist/ \
          public/ \
          package.json \
          package-lock.json \
          mikro-orm.config.ts \
          tsconfig.json
        
        # Copy files to EC2
        scp -o StrictHostKeyChecking=no \
          -i ~/.ssh/deploy_key \
          deployment.tar.gz \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no \
          -i ~/.ssh/deploy_key \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          'bash -s' < .github/scripts/deploy.sh 